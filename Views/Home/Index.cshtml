@{
    ViewData["Title"] = "WorkBot";
    Layout = null;
}

<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>WorkBot - Enhanced AI Assistant</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * { 
            box-sizing: border-box; 
            margin: 0; 
            padding: 0; 
        }
        
        :root {
            --primary: #00d4ff;
            --primary-hover: #00b4e6;
            --secondary: #0a0e1a;
            --accent: #7c3aed;
            --success: #10b981;
            --warning: #f59e0b;
            --error: #ef4444;
            --text-primary: #ffffff;
            --text-secondary: #a1a1aa;
            --text-muted: #6b7280;
            --border: #374151;
            --border-focus: rgba(0, 212, 255, 0.5);
            --user-bg: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            --assistant-bg: rgba(10, 14, 26, 0.8);
            --glass-bg: rgba(10, 14, 26, 0.85);
            --glass-border: rgba(0, 212, 255, 0.2);
            --sidebar-bg: rgba(0, 0, 0, 0.9);
            --sidebar-border: rgba(0, 212, 255, 0.3);
            --neon-glow: 0 0 20px rgba(0, 212, 255, 0.3);
        }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, Roboto, sans-serif;
            background: url('/images/windsorSunset.jpg') center/cover no-repeat fixed;
            min-height: 100vh;
            display: flex;
            position: relative;
            overflow: hidden;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, 
                rgba(0, 212, 255, 0.1) 0%, 
                rgba(124, 58, 237, 0.15) 50%, 
                rgba(10, 14, 26, 0.8) 100%);
            z-index: 0;
        }

        .bg-grid {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 212, 255, 0.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 212, 255, 0.05) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: gridMove 20s linear infinite;
            z-index: 1;
        }

        @@keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }

        .app-container {
            display: flex;
            width: 100%;
            height: 100vh;
            position: relative;
            z-index: 10;
        }

        .sidebar {
            width: 320px;
            background: var(--sidebar-bg);
            backdrop-filter: blur(20px);
            border-right: 2px solid var(--sidebar-border);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: var(--neon-glow);
        }

        .sidebar-header {
            padding: 25px;
            border-bottom: 2px solid var(--sidebar-border);
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(124, 58, 237, 0.1));
        }

        .sidebar-header h2 {
            color: var(--text-primary);
            font-size: 1.4em;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .windsor-logo-small {
            width: 30px;
            height: 30px;
            background: url('/images/windsorLogo.png') center/contain no-repeat;
            filter: drop-shadow(0 0 5px rgba(0, 212, 255, 0.5));
        }

        .new-chat-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .new-chat-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .new-chat-btn:hover::before {
            left: 100%;
        }

        .new-chat-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.4);
        }

        .conversations-list {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
        }

        .conversation-item {
            padding: 15px;
            margin-bottom: 8px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid transparent;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            position: relative;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 10px;
        }

        .conversation-item:hover {
            background: rgba(0, 212, 255, 0.1);
            border-color: var(--primary);
            transform: translateX(5px);
        }

        .conversation-item.active {
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.2), rgba(124, 58, 237, 0.2));
            border-color: var(--primary);
            box-shadow: inset 0 0 20px rgba(0, 212, 255, 0.2);
        }

        .conversation-content {
            flex: 1;
        }

        .conversation-title {
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 6px;
        }

        .conversation-meta {
            color: var(--text-muted);
            font-size: 0.8em;
        }

        .delete-conversation {
            background: none;
            border: none;
            color: var(--text-muted);
            cursor: pointer;
            padding: 5px;
            border-radius: 6px;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .conversation-item:hover .delete-conversation {
            opacity: 1;
        }

        .delete-conversation:hover {
            background: var(--error);
            color: white;
            transform: scale(1.1);
        }

        .sidebar-footer {
            padding: 25px;
            border-top: 2px solid var(--sidebar-border);
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(124, 58, 237, 0.1));
        }

        .user-info {
            color: var(--text-primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 30px;
            height: 30px;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .logout-btn {
            width: 100%;
            padding: 12px;
            background: transparent;
            color: var(--text-secondary);
            border: 2px solid var(--border);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 500;
        }

        .logout-btn:hover {
            background: rgba(239, 68, 68, 0.2);
            border-color: var(--error);
            color: var(--error);
            box-shadow: 0 0 15px rgba(239, 68, 68, 0.3);
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .header {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border-bottom: 2px solid var(--glass-border);
            padding: 25px 35px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .header-left h1 { 
            font-size: 2em; 
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            filter: drop-shadow(0 0 10px rgba(0, 212, 255, 0.3));
        }

        .header-right {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .toggle-sidebar {
            display: none;
            padding: 10px 15px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .model-indicator {
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--text-secondary);
            font-size: 0.9em;
            padding: 10px 18px;
            background: rgba(124, 58, 237, 0.1);
            border-radius: 20px;
            border: 1px solid rgba(124, 58, 237, 0.3);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .model-indicator:hover {
            border-color: var(--accent);
            box-shadow: 0 0 15px rgba(124, 58, 237, 0.3);
        }

        .model-icon {
            font-size: 1.2em;
            filter: drop-shadow(0 0 8px rgba(124, 58, 237, 0.5));
        }

        .model-info {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .model-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.95em;
        }

        .model-status {
            font-size: 0.8em;
            color: var(--text-muted);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--text-secondary);
            font-size: 0.9em;
            padding: 8px 16px;
            background: rgba(16, 185, 129, 0.1);
            border-radius: 20px;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--success);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        #chat {
            flex: 1;
            overflow-y: auto;
            padding: 25px 35px;
            display: flex;
            flex-direction: column;
            gap: 25px;
            scroll-behavior: smooth;
        }

        #chat::-webkit-scrollbar {
            width: 12px;
        }

        #chat::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
        }

        #chat::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            border-radius: 6px;
            box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
        }

        .msg {
            max-width: 80%;
            padding: 20px 25px;
            border-radius: 20px;
            line-height: 1.6;
            position: relative;
            animation: messageSlide 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 0.95em;
            word-wrap: break-word;
            backdrop-filter: blur(10px);
            border: 1px solid transparent;
        }

        @@keyframes messageSlide {
            from { 
                opacity: 0; 
                transform: translateY(30px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }

        .user {
            align-self: flex-end;
            background: var(--user-bg);
            color: white;
            border-bottom-right-radius: 8px;
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.3);
        }

        .assistant {
            align-self: flex-start;
            background: var(--assistant-bg);
            color: var(--text-primary);
            border: 1px solid var(--glass-border);
            border-bottom-left-radius: 8px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .file-indicator {
            background: rgba(124, 58, 237, 0.2);
            border: 1px solid var(--accent);
            border-radius: 10px;
            padding: 10px 15px;
            margin-top: 12px;
            font-size: 0.85em;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .model-badge {
            background: rgba(124, 58, 237, 0.2);
            border: 1px solid var(--accent);
            border-radius: 10px;
            padding: 6px 12px;
            margin-top: 12px;
            font-size: 0.8em;
            color: var(--accent);
            display: inline-flex;
            align-items: center;
            gap: 6px;
            backdrop-filter: blur(10px);
            font-weight: 500;
        }

        .thinking-indicator {
            display: flex;
            align-items: center;
            gap: 15px;
            max-width: 80%;
            padding: 20px 25px;
            border-radius: 20px;
            background: var(--assistant-bg);
            border: 1px solid var(--glass-border);
            border-bottom-left-radius: 8px;
            animation: messageSlide 0.4s ease-out;
            backdrop-filter: blur(10px);
        }

        .thinking-dots {
            display: flex;
            gap: 6px;
        }

        .dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: var(--primary);
            animation: thinking 1.4s ease-in-out infinite both;
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        .dot:nth-child(1) { animation-delay: -0.32s; }
        .dot:nth-child(2) { animation-delay: -0.16s; }

        @@keyframes thinking {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1.2); opacity: 1; }
        }

        .input-container {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border-top: 2px solid var(--glass-border);
            padding: 25px 35px;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.3);
        }

        .file-upload-area {
            margin-bottom: 20px;
            padding: 20px;
            border: 2px dashed var(--border);
            border-radius: 15px;
            text-align: center;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        .file-upload-area:hover {
            border-color: var(--primary);
            background: rgba(0, 212, 255, 0.1);
            box-shadow: inset 0 0 20px rgba(0, 212, 255, 0.2);
        }

        .file-upload-area.dragover {
            border-color: var(--primary);
            background: rgba(0, 212, 255, 0.2);
            transform: scale(1.02);
            box-shadow: var(--neon-glow);
        }

        .upload-text {
            color: var(--text-secondary);
            margin-bottom: 15px;
            font-size: 1.1em;
        }

        .upload-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .upload-btn {
            padding: 12px 20px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 212, 255, 0.4);
        }

        .clear-files-btn {
            background: linear-gradient(135deg, var(--error) 0%, #dc2626 100%);
        }

        .clear-files-btn:hover {
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
        }

        .uploaded-files {
            margin-bottom: 20px;
        }

        .file-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .file-tag {
            background: rgba(124, 58, 237, 0.2);
            border: 1px solid var(--accent);
            border-radius: 25px;
            padding: 8px 15px;
            font-size: 0.85em;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 8px;
            max-width: 250px;
            backdrop-filter: blur(10px);
        }

        .file-name {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        .file-size {
            color: var(--text-muted);
            font-size: 0.8em;
        }

        .remove-file {
            background: none;
            border: none;
            color: var(--accent);
            cursor: pointer;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .remove-file:hover {
            background: var(--accent);
            color: white;
            transform: scale(1.2);
        }

        .input-area {
            display: flex;
            gap: 20px;
            align-items: flex-end;
        }

        .message-input-container {
            flex: 1;
            position: relative;
        }

        textarea {
            width: 100%;
            padding: 18px 25px;
            border: 2px solid var(--border);
            border-radius: 15px;
            resize: none;
            min-height: 60px;
            max-height: 150px;
            font-size: 0.95em;
            font-family: inherit;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(0, 0, 0, 0.4);
            color: var(--text-primary);
            backdrop-filter: blur(10px);
        }

        textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 25px var(--border-focus);
            background: rgba(0, 0, 0, 0.6);
        }

        textarea::placeholder {
            color: var(--text-muted);
        }

        .send-button {
            padding: 18px 30px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 10px;
            min-width: 140px;
            justify-content: center;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .send-button:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.4);
        }

        .send-button:disabled {
            background: linear-gradient(135deg, var(--text-secondary), var(--border));
            cursor: not-allowed;
            transform: none;
        }

        input[type="file"] { 
            display: none; 
        }

        .empty-state {
            text-align: center;
            padding: 80px 40px;
            color: var(--text-secondary);
        }

        .empty-state h3 {
            font-size: 1.5em;
            margin-bottom: 15px;
            color: var(--text-primary);
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .empty-state p {
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .feature-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            max-width: 900px;
            margin: 0 auto;
        }

        .feature-item {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid var(--glass-border);
            text-align: left;
            transition: all 0.3s ease;
        }

        .feature-item:hover {
            border-color: var(--primary);
            box-shadow: var(--neon-glow);
            transform: translateY(-5px);
        }

        .feature-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
            filter: drop-shadow(0 0 10px rgba(0, 212, 255, 0.5));
        }

        .feature-title {
            font-weight: 700;
            margin-bottom: 12px;
            color: var(--text-primary);
            font-size: 1.1em;
        }

        .feature-desc {
            font-size: 0.95em;
            color: var(--text-secondary);
            line-height: 1.5;
        }

        @@media (max-width: 768px) {
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                z-index: 1000;
                transform: translateX(-100%);
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .toggle-sidebar {
                display: block;
            }

            .main-content {
                width: 100%;
            }

            .header, .input-container {
                padding: 20px;
            }

            #chat {
                padding: 20px;
            }

            .msg {
                max-width: 95%;
            }

            .upload-buttons {
                flex-direction: column;
                align-items: center;
            }

            .input-area {
                flex-direction: column;
                gap: 15px;
            }

            .model-indicator {
                padding: 8px 12px;
                font-size: 0.8em;
            }
            
            .model-info {
                display: none;
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .notification {
            position: fixed;
            top: 25px;
            right: 25px;
            padding: 15px 25px;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(20px);
            border: 1px solid;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: rgba(16, 185, 129, 0.9);
            border-color: var(--success);
        }

        .notification.error {
            background: rgba(239, 68, 68, 0.9);
            border-color: var(--error);
        }
    </style>
</head>
<body>
    <div class="bg-grid"></div>

    <div class="overlay" id="overlay"></div>

    <div class="app-container">
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>
                    <div class="windsor-logo-small"></div>
                    WorkBot
                </h2>
                <button class="new-chat-btn" onclick="newConversation()">
                    ➕ New Session
                </button>
            </div>
            
            <div class="conversations-list" id="conversations-list">
            </div>
            
            <div class="sidebar-footer">
                <div class="user-info" id="user-info">
                    <div class="user-avatar">@(User.Identity?.Name?.Substring(0, 1).ToUpper() ?? "U")</div>
                    <div>@(User.Identity?.Name ?? "User")</div>
                </div>
                <button class="logout-btn" onclick="logout()">
                    🚪 Disconnect
                </button>
            </div>
        </div>

        <div class="main-content">
            <div class="header">
                <div class="header-left">
                    <button class="toggle-sidebar" onclick="toggleSidebar()">☰</button>
                    <h1>🧠 Enhanced WorkBot</h1>
                </div>
                <div class="header-right">
                    <div class="model-indicator" id="model-indicator">
                        <div class="model-icon">🤖</div>
                        <div class="model-info">
                            <div class="model-name" id="model-name">Loading...</div>
                            <div class="model-status" id="model-status">Checking status...</div>
                        </div>
                    </div>
                    <div class="status-indicator">
                        <div class="status-dot"></div>
                        <span>System Online</span>
                    </div>
                </div>
            </div>

            <div id="chat">
                <div class="empty-state" id="empty-state">
                    <h3>Welcome to Enhanced WorkBot!</h3>
                    <p>Your intelligent AI assistant with memory and multi-file processing capabilities.</p>
                    
                    <div class="feature-list">
                        <div class="feature-item">
                            <div class="feature-icon">📁</div>
                            <div class="feature-title">Multi-File Support</div>
                            <div class="feature-desc">Upload multiple files including ZIP archives, PDFs, DOCX, images, CSV, JSON and ask questions about them</div>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">🧠</div>
                            <div class="feature-title">Persistent Memory</div>
                            <div class="feature-desc">Your conversations are saved and I remember context across sessions</div>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">💬</div>
                            <div class="feature-title">Enhanced Context</div>
                            <div class="feature-desc">Larger token limits for detailed responses and complex analysis</div>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">👤</div>
                            <div class="feature-title">Personal Workspace</div>
                            <div class="feature-desc">Your own account with private conversations and file history</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="input-container">
                <div class="file-upload-area" id="file-upload-area" onclick="document.getElementById('file-input').click()">
                    <div class="upload-text">
                        📎 Drag & drop files here or click to upload (including ZIP files)
                    </div>
                    <div class="upload-buttons">
                        <button type="button" class="upload-btn" onclick="document.getElementById('file-input').click()">
                            📁 Choose Files
                        </button>
                        <button type="button" class="upload-btn clear-files-btn" onclick="clearAllFiles()" id="clear-files-btn" style="display: none;">
                            🗑️ Clear All
                        </button>
                    </div>
                    <input type="file" id="file-input" multiple accept=".txt,.pdf,.docx,.png,.jpg,.jpeg,.webp,.csv,.json,.zip">
                </div>

                <div class="uploaded-files" id="uploaded-files" style="display: none;">
                    <div class="file-list" id="file-list"></div>
                </div>

                <form class="input-area" id="chat-form">
                    <div class="message-input-container">
                        <textarea 
                            id="message_input" 
                            name="message" 
                            placeholder="Ask me anything or upload files to analyze..."
                            rows="1"
                        ></textarea>
                    </div>
                    
                    <button type="submit" class="send-button" id="send-btn">
                        <span>Send</span>
                        <span>🚀</span>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        let thinkingIndicator = null;
        let uploadedFiles = [];
        let currentConversationId = null;
        let sidebarOpen = false;
        let currentModel = 'Unknown';

        document.addEventListener('DOMContentLoaded', function() {
            loadConversations();
            loadHistory();
            loadModelInfo(); // Add this line
            setupEventListeners();
        });

        // Load model information on page load
        async function loadModelInfo() {
            try {
                const response = await fetch('/Api/GetModelInfo');
                const data = await response.json();
                
                if (response.ok) {
                    currentModel = data.model;
                    updateModelDisplay(data.model, data.status);
                } else {
                    updateModelDisplay('Unknown', 'error');
                }
            } catch (error) {
                console.error('Failed to load model info:', error);
                updateModelDisplay('Unknown', 'error');
            }
        }

        // Update the model display in the header
        function updateModelDisplay(modelName, status) {
            const modelNameElement = document.getElementById('model-name');
            const modelStatusElement = document.getElementById('model-status');
            
            if (modelNameElement) {
                modelNameElement.textContent = modelName;
            }
            
            if (modelStatusElement) {
                const statusText = status === 'online' ? 'Ready' : 
                                  status === 'error' ? 'Error' : 'Unknown';
                modelStatusElement.textContent = statusText;
                
                // Update status color
                modelStatusElement.style.color = status === 'online' ? 'var(--success)' : 
                                                status === 'error' ? 'var(--error)' : 'var(--text-muted)';
            }
        }

        function setupEventListeners() {
            document.getElementById('file-input').addEventListener('change', handleFileSelect);
            
            const uploadArea = document.getElementById('file-upload-area');
            uploadArea.addEventListener('dragover', handleDragOver);
            uploadArea.addEventListener('dragleave', handleDragLeave);
            uploadArea.addEventListener('drop', handleDrop);
            
            document.getElementById('chat-form').addEventListener('submit', handleSubmit);
            document.getElementById('message_input').addEventListener('input', function(e) {
                autoResize(e.target);
            });
            document.getElementById('message_input').addEventListener('keydown', handleKeyDown);
            document.getElementById('overlay').addEventListener('click', closeSidebar);
        }

        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            uploadFiles(files);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            uploadFiles(files);
        }

        async function uploadFiles(files) {
            if (files.length === 0) return;
            
            const formData = new FormData();
            files.forEach(file => formData.append('files', file));
            
            showNotification(`Uploading ${files.length} file(s)...`, 'info');
            
            try {
                const response = await fetch('/Api/UploadFiles', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    uploadedFiles = result.files || [];
                    updateFileDisplay();
                    showNotification(`Uploaded ${result.total} file(s) successfully!`, 'success');
                } else {
                    showNotification(result.error || 'Upload failed', 'error');
                }
            } catch (error) {
                console.error('Upload error:', error);
                showNotification('Upload failed: ' + error.message, 'error');
            }
            
            document.getElementById('file-input').value = '';
        }

        function updateFileDisplay() {
            const fileList = document.getElementById('file-list');
            const uploadedFilesDiv = document.getElementById('uploaded-files');
            const clearBtn = document.getElementById('clear-files-btn');
            
            if (uploadedFiles.length === 0) {
                uploadedFilesDiv.style.display = 'none';
                clearBtn.style.display = 'none';
                return;
            }
            
            uploadedFilesDiv.style.display = 'block';
            clearBtn.style.display = 'inline-block';
            
            fileList.innerHTML = uploadedFiles.map(file => `
                <div class="file-tag">
                    <span class="file-name" title="${file.name}">${file.name}</span>
                    <span class="file-size">(${(file.size / 1024).toFixed(1)}KB)</span>
                    <button class="remove-file" onclick="removeFile(${file.id})" title="Remove file">×</button>
                </div>
            `).join('');
        }

        async function removeFile(fileId) {
            try {
                const response = await fetch(`/Api/RemoveFile/${fileId}`);
                if (response.ok) {
                    uploadedFiles = uploadedFiles.filter(f => f.id !== fileId);
                    updateFileDisplay();
                    showNotification('File removed', 'success');
                }
            } catch (error) {
                showNotification('Failed to remove file', 'error');
            }
        }

        async function clearAllFiles() {
            try {
                const response = await fetch('/Api/ClearFiles');
                if (response.ok) {
                    uploadedFiles = [];
                    updateFileDisplay();
                    showNotification('All files cleared', 'success');
                }
            } catch (error) {
                showNotification('Failed to clear files', 'error');
            }
        }

        async function deleteConversation(conversationId) {
            if (!confirm('Are you sure you want to delete this conversation?')) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('conversationId', conversationId);
                
                const response = await fetch('/Api/DeleteConversation', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Conversation deleted', 'success');
                    loadConversations();
                    
                    if (conversationId === currentConversationId) {
                        document.getElementById('chat').innerHTML = '<div class="empty-state" id="empty-state"><h3>Conversation Deleted</h3><p>Start a new conversation or select an existing one.</p></div>';
                        currentConversationId = null;
                    }
                } else {
                    showNotification(result.error || 'Failed to delete conversation', 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                showNotification('Failed to delete conversation', 'error');
            }
        }

        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
        }

        // Updated addMessage function to include model info
        function addMessage(role, text, hasFiles = false, modelName = null) {
            const chat = document.getElementById("chat");
            const emptyState = document.getElementById("empty-state");
            
            if (emptyState) {
                emptyState.style.display = 'none';
            }
            
            if (thinkingIndicator) {
                thinkingIndicator.remove();
                thinkingIndicator = null;
            }
            
            const div = document.createElement("div");
            div.className = `msg ${role}`;
            
            let content = text.replace(/\n/g, '<br>');
            
            if (role === 'user' && hasFiles) {
                content += '<div class="file-indicator">📎 Message includes uploaded files</div>';
            }
            
            // Add model info to assistant messages
            if (role === 'assistant' && modelName) {
                content += `<div class="model-badge">🤖 ${modelName}</div>`;
            }
            
            div.innerHTML = content;
            
            chat.appendChild(div);
            chat.scrollTop = chat.scrollHeight;
        }

        function showThinking() {
            const chat = document.getElementById("chat");
            const emptyState = document.getElementById("empty-state");
            
            if (emptyState) {
                emptyState.style.display = 'none';
            }
            
            thinkingIndicator = document.createElement("div");
            thinkingIndicator.className = "thinking-indicator";
            thinkingIndicator.innerHTML = `
                <span>🧠 Processing</span>
                <div class="thinking-dots">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            `;
            
            chat.appendChild(thinkingIndicator);
            chat.scrollTop = chat.scrollHeight;
        }

        // Updated handleSubmit function to show model info in responses
        async function handleSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const message = formData.get("message");
            const hasFiles = uploadedFiles.length > 0;

            if (!message.trim() && !hasFiles) {
                showNotification('Please enter a message or upload files', 'error');
                return;
            }

            const sendBtn = document.getElementById("send-btn");
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<span>Sending...</span><span>⏳</span>';

            if (message.trim()) {
                addMessage("user", message.trim(), hasFiles);
            } else if (hasFiles) {
                addMessage("user", "Analyze uploaded files", true);
            }

            showThinking();
            
            e.target.reset();
            document.getElementById("message_input").style.height = 'auto';

            try {
                const response = await fetch('/Api/Chat', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || `HTTP ${response.status}`);
                }

                if (result.error) {
                    addMessage("assistant", "Warning: " + result.error);
                } else if (result.reply) {
                    // Add the response with model information
                    addMessage("assistant", result.reply, false, result.model);
                } else {
                    addMessage("assistant", "Warning: No response received.");
                }
            } catch (error) {
                console.error("Request error:", error);
                addMessage("assistant", "Connection error: " + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<span>Send</span><span>🚀</span>';
                loadConversations();
            }
        }

        function handleKeyDown(e) {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                document.getElementById("chat-form").dispatchEvent(new Event("submit", { bubbles: true, cancelable: true }));
            }
        }

        async function loadHistory() {
            try {
                const resp = await fetch('/Api/History');
                const data = await resp.json();
                
                if (data.recent && Array.isArray(data.recent)) {
                    data.recent.forEach(msg => {
                        addMessage(msg.role, msg.content, msg.hasFiles || false);
                    });
                }
                
                if (data.files && Array.isArray(data.files)) {
                    uploadedFiles = data.files;
                    updateFileDisplay();
                }
                
                currentConversationId = data.conversationId;
            } catch (e) {
                console.error("Failed to load history:", e);
            }
        }

        async function loadConversations() {
            try {
                const resp = await fetch('/Api/Conversations');
                const data = await resp.json();
                
                const conversationsList = document.getElementById('conversations-list');
                
                if (data.conversations && data.conversations.length > 0) {
                    conversationsList.innerHTML = data.conversations.map(conv => `
                        <div class="conversation-item ${conv.id === currentConversationId ? 'active' : ''}" 
                             onclick="loadConversation('${conv.id}')">
                            <div class="conversation-content">
                                <div class="conversation-title">${conv.title}</div>
                                <div class="conversation-meta">
                                    ${conv.message_count} messages • ${conv.updated_at}
                                </div>
                            </div>
                            <button class="delete-conversation" onclick="event.stopPropagation(); deleteConversation('${conv.id}')" title="Delete conversation">
                                🗑️
                            </button>
                        </div>
                    `).join('');
                } else {
                    conversationsList.innerHTML = '<div class="conversation-item">No conversations yet<br><small>Click "New Session" to start</small></div>';
                }
            } catch (e) {
                console.error("Failed to load conversations:", e);
            }
        }

        async function loadConversation(conversationId) {
            try {
                window.location.href = `/Home/LoadConversation/${conversationId}`;
            } catch (e) {
                console.error("Failed to load conversation:", e);
            }
        }

        async function newConversation() {
            try {
                window.location.href = '/Home/NewConversation';
            } catch (e) {
                console.error("Failed to create new conversation:", e);
            }
        }

        function logout() {
            if (confirm('Are you sure you want to disconnect?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Account/Logout';
                document.body.appendChild(form);
                form.submit();
            }
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');
            
            sidebarOpen = !sidebarOpen;
            
            if (sidebarOpen) {
                sidebar.classList.add('open');
                overlay.classList.add('show');
            } else {
                sidebar.classList.remove('open');
                overlay.classList.remove('show');
            }
        }

        function closeSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');
            
            sidebarOpen = false;
            sidebar.classList.remove('open');
            overlay.classList.remove('show');
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
    </script>
</body>
</html>